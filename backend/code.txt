Certainly! I'll walk you through a clear, step-by-step example of how to implement user authentication with login functionality in both the frontend (React) and backend (Node.js with Express and MongoDB). This example assumes you have basic knowledge of JavaScript, React, Node.js, Express, MongoDB, and HTTP requests.

### Backend (Node.js with Express and MongoDB)

#### Step 1: Set Up Your Project

Ensure you have Node.js installed. Initialize a new Node.js project and install necessary packages:

```bash
mkdir backend
cd backend
npm init -y
npm install express mongoose bcryptjs jsonwebtoken cors body-parser
```

#### Step 2: Create MongoDB Database and User Model

Assuming you have MongoDB installed and running locally:

1. Create a MongoDB database named `mern_auth_demo`.
2. Define a User schema (`models/User.js`) using Mongoose:

```javascript
// models/User.js
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const userSchema = new Schema({
  username: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true }
});

module.exports = mongoose.model('User', userSchema);
```

#### Step 3: Implement Authentication Endpoints

Create authentication routes (`routes/auth.js`) using Express:

```javascript
// routes/auth.js
const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

// Register route
router.post('/register', async (req, res) => {
  const { username, email, password } = req.body;

  try {
    // Check if user already exists
    let user = await User.findOne({ email });
    if (user) {
      return res.status(400).json({ msg: 'User already exists' });
    }

    // Create new user
    user = new User({ username, email, password });

    // Hash password
    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(password, salt);

    // Save user to database
    await user.save();

    res.status(201).json({ msg: 'User registered successfully' });
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Server Error');
  }
});

// Login route
router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    // Check if user exists
    let user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ msg: 'Invalid credentials' });
    }

    // Validate password
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ msg: 'Invalid credentials' });
    }

    // Create and return JWT token
    const payload = {
      user: {
        id: user.id
      }
    };

    jwt.sign(payload, 'jwtSecret', { expiresIn: 3600 }, (err, token) => {
      if (err) throw err;
      res.json({ token });
    });
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Server Error');
  }
});

module.exports = router;
```

#### Step 4: Set Up Express Server

Initialize your Express server (`server.js`):

```javascript
// server.js
const express = require('express');
const connectDB = require('./config/db');
const cors = require('cors');

const app = express();

// Connect to MongoDB
connectDB();

// Middleware
app.use(express.json());
app.use(cors());

// Define routes
app.use('/api/auth', require('./routes/auth'));

const PORT = process.env.PORT || 5000;

app.listen(PORT, () => console.log(`Server started on port ${PORT}`));
```

#### Step 5: Connect to MongoDB

Create a MongoDB connection file (`config/db.js`):

```javascript
// config/db.js
const mongoose = require('mongoose');
const config = require('config');
const db = config.get('mongoURI');

const connectDB = async () => {
  try {
    await mongoose.connect(db, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      useCreateIndex: true
    });
    console.log('MongoDB connected');
  } catch (err) {
    console.error(err.message);
    process.exit(1);
  }
};

module.exports = connectDB;
```

### Frontend (React)

#### Step 1: Set Up Your Project

Initialize a new React project:

```bash
npx create-react-app frontend
cd frontend
```

#### Step 2: Create Login Component

Design a simple login form component (`src/components/Login.js`):

```javascript
// src/components/Login.js
import React, { useState } from 'react';
import axios from 'axios';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const onSubmit = async e => {
    e.preventDefault();

    try {
      const res = await axios.post('http://localhost:5000/api/auth/login', {
        email,
        password
      });

      console.log(res.data); // Log JWT token to console for now
      // Handle storing token in local storage or state
    } catch (err) {
      console.error(err.response.data.msg);
    }
  };

  return (
    <div>
      <h2>Login</h2>
      <form onSubmit={onSubmit}>
        <div>
          <label htmlFor="email">Email:</label>
          <input
            type="email"
            id="email"
            value={email}
            onChange={e => setEmail(e.target.value)}
            required
          />
        </div>
        <div>
          <label htmlFor="password">Password:</label>
          <input
            type="password"
            id="password"
            value={password}
            onChange={e => setPassword(e.target.value)}
            required
          />
        </div>
        <button type="submit">Login</button>
      </form>
    </div>
  );
};

export default Login;
```

#### Step 3: Connect React to Backend

Make sure to adjust CORS settings in your Express server (`server.js`) to allow requests from `http://localhost:3000` (default for React):

```javascript
// server.js
const cors = require('cors');

// ...

// Middleware
app.use(express.json());
app.use(cors({ origin: 'http://localhost:3000' }));

// ...
```

#### Step 4: Implement Registration Component (Optional)

Similarly, you can implement a registration component (`src/components/Register.js`) using React and Axios to send registration data to your backend (`POST /api/auth/register`).

#### Step 5: Test Your Application

Start both the backend and frontend servers:

```bash
# In the backend directory
npm start

# In the frontend directory
npm start
```

Visit `http://localhost:3000` in your browser to see your React application. Use the login form to test authentication.

### Summary

This example demonstrates a basic implementation of user authentication with login functionality in a MERN stack application. The backend handles user data storage and authentication using MongoDB, Express, bcrypt for password hashing, and JWT for token-based authentication. The frontend, built with React, communicates with the backend using Axios to send login requests and receive JWT tokens for authenticated sessions. Adjust and expand upon this example based on your project requirements and security considerations.